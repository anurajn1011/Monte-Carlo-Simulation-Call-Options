#Call option
    call = np.exp(-r * T) * np.maximum(0, (present - K))
    expectation_call = np.sum(call) / NbTraj
    expectation_control_1 = 0

    cov_call = ((call - expectation_call) * (y1 - expectation_control_1)) / (NbTraj - 1)
    var_call = ((y1 - expectation_control_1) * (y1 - expectation_control_1)) / (NbTraj - 1)
    #optimal alpha
    alpha1 = -cov_call / var_call

    PrixControl1 = call + alpha1 * (y1 - expectation_call)
    call_price = np.sum(PrixControl1) / NbTraj

    #Put Option
    put = np.exp(-r * T) * np.maximum(0, K - present)
    expectation_put = np.sum(put) / NbTraj
    expectation_control_2 = 0
    cov_put = ((put - expectation_put) * (y2 - expectation_control_2)) / (NbTraj - 1)
    var_put = (((y2 - expectation_control_2)) * ((y2 - expectation_control_2))) / (NbTraj - 1)
    #optimal alpha
    alpha2 = -cov_put / var_put

    PrixControl2 = put + alpha2 * (y2 - expectation_control_2)
    put_price = np.sum(PrixControl2) / NbTraj


    return (call_price, put_price)



    --------------------------


    #call option
    X1 = np.exp(-r * T) * np.maximum(0, (present - K))
    EX1 = np.sum(X1)/NbTraj
    EY1 = 0

    print((y1 - EY1))

    cov1 = ((X1 - EX1) * (y1 - EY1)) / (NbTraj - 1)
    var1 = ((y1 - EY1) * (y1 - EY1)) / (NbTraj - 1)
    alpha1 = -cov1/var1

    PrixControl1 = X1 + alpha1 * (y1 - EY1)
    repCall = np.sum(PrixControl1) / NbTraj

    return repCall